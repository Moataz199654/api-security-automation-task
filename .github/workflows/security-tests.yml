# Continuous Integration workflow for API Security Testing
# This workflow runs automated security tests against various API endpoints including:
# - Pickup API security
# - Bank info update security
# - Forget password API security

name: CI - API Security Tests

# Define when this workflow will run
on:
  push:
    branches: [ main, develop, forget-password-api-tests, bank-info-api-tests, pickups-api-tests ]  # Runs on pushes to feature branches
  pull_request:
    branches: [ main, develop, forget-password-api-tests, bank-info-api-tests, pickups-api-tests ]  # Runs on PRs targeting feature branches

jobs:
  test:
    runs-on: ubuntu-latest  # Use latest Ubuntu runner

    # Environment variables loaded from GitHub secrets
    # These need to be configured in repository settings
    env:
      API_BASE_URL: ${{ secrets.API_BASE_URL }}       # Base URL for API endpoints
      TEST_USER_TOKEN: ${{ secrets.TEST_USER_TOKEN }}  # Authentication token for API

    steps:
    # Step 1: Check out the repository code
    - name: Checkout code
      uses: actions/checkout@v4  # Using latest stable version

    # Step 2: Set up Python environment with dependency caching
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'  # Using Python 3.11 for testing
        cache: 'pip'  # Enable pip caching for faster builds

    # Step 3: Install project dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Step 4: Create directories for test outputs
    - name: Create test directories
      run: |
        mkdir -p test-results reports

    # Step 5: Run the security test suite with reporting
    - name: Run security tests
      run: |
        pytest tests/test_pickups_security.py tests/test_bank_info_update.py tests/test_security_forget_password_api.py -v --maxfail=1 --disable-warnings \
        --junitxml=test-results/junit.xml --html=reports/report.html

    # Step 6: Upload test results and reports as artifacts
    - name: Upload test results
      if: always()  # Run this step even if tests fail
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          test-results/
          reports/
        retention-days: 7  # Keep test results for a week

    # Step 7: Check test status and provide feedback
    - name: Custom failure message
      if: failure()
      run: echo "::error::Security tests failed. Check reports in the artifacts."
  